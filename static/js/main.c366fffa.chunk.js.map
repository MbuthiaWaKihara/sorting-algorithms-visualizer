{"version":3,"sources":["styles/layout.js","components/Title.js","components/Navigation.js","components/Screen.js","components/App.js","logic/Algorithms.js","index.js"],"names":["containerStyles","height","backgroundColor","sideBarStyles","innerContainer","headerStyles","contentStyles","React","memo","message","style","width","textAlign","color","fontWeight","lineHeight","fontSize","response","isAnimating","Sidenav","defaultOpenKeys","activeKey","appearance","onSelect","eventKey","Body","Nav","Item","disabled","Dropdown","title","arrayInfo","animationInfo","sorted","arrayHeight","currentArray","length","displayArray","map","position","positionIndex","className","number","margin","marginBottom","borderTopLeftRadius","borderBottomLeftRadius","key","indexInArray","display","flexDirection","Slider","value","onChange","setCurrentArray","createNewArray","min","max","tooltip","barClassName","animationMilliseconds","setAnimationMilliseconds","size","newArray","counter","Math","floor","random","randomizeAlgInfo","algName","algNumber","orderName","orderNumber","algorithm","order","animationInterval","useRef","animationPosition","useState","setIsAnimating","algsInfo","setAlgsInfo","titleMessage","setTitleMessage","frameLength","setFrameLength","setSorted","sort","frames","descending","decreasing","rawArray","holder","copyArray","compare","push","JSON","parse","stringify","insertionSort","criteria","selectionLimit","indexOfCriteria","Infinity","selectionSort","swapped","bubbleSort","start","end","partition","subframes","pivot","pivotIndex","stack","top","positionOfNextPivot","concat","quickSort","arr","n","curr_size","left_start","merge","l","m","r","i","j","k","n1","n2","L","R","positionL","positionR","indexInRawL","indexInRawR","mergeSort","sortedArray","current","setInterval","previousArray","useEffect","clearInterval","Alert","success","Container","Sidebar","window","location","reload","previousInfo","info","Header","Content","rootNode","document","querySelector","ReactDOM","render"],"mappings":"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","file":"static/js/main.c366fffa.chunk.js","sourcesContent":["export const containerStyles = {\r\n    height: '49.3rem',\r\n    backgroundColor: '#f5f5f5',\r\n}\r\n\r\nexport const sideBarStyles = {\r\n    backgroundColor: '#397afa',\r\n}\r\n\r\nexport const innerContainer = {\r\n}\r\n\r\nexport const headerStyles = {\r\n    backgroundColor: '#397afa',\r\n    height: '6.4%',\r\n}\r\n\r\nexport const contentStyles = {\r\n    height: '93.6%',\r\n}","import React from 'react';\r\n\r\nconst Title = ({message}) => {\r\n    return (\r\n        <>\r\n            <div\r\n            style={{\r\n                width: '100%',\r\n                textAlign: 'center',\r\n                color: '#ffffff',\r\n                fontWeight: 'bolder',\r\n                lineHeight: '150%',\r\n                fontSize: '2em'\r\n            }}\r\n            >\r\n                {message}\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default React.memo(Title);","import React from 'react';\r\nimport {\r\n    Sidenav,\r\n    Nav, \r\n    Dropdown, \r\n} from 'rsuite';\r\n\r\nconst Navigation = ({response, isAnimating}) => {\r\n    return (\r\n        <>\r\n            <div style={{  }}>\r\n                <Sidenav \r\n                defaultOpenKeys={['3', '4']} \r\n                activeKey=\"1\" \r\n                appearance=\"inverse\"\r\n                onSelect={eventKey => {!isAnimating && response(eventKey)}}\r\n                >\r\n                <Sidenav.Body>\r\n                    <Nav>\r\n                    <Nav.Item eventKey=\"1\" disabled={isAnimating}>\r\n                        Sort!\r\n                    </Nav.Item>\r\n                    <Nav.Item eventKey=\"2\" disabled={isAnimating}>\r\n                        Refresh\r\n                    </Nav.Item>\r\n                    <Dropdown \r\n                        eventKey=\"3\" \r\n                        title=\"Sorting Order\"\r\n                    >\r\n                        <Dropdown.Item eventKey=\"3-1\" disabled={isAnimating}>Ascending</Dropdown.Item>\r\n                        <Dropdown.Item eventKey=\"3-2\" disabled={isAnimating}>Descending</Dropdown.Item>\r\n                    </Dropdown>\r\n                    <Dropdown\r\n                        eventKey=\"4\"\r\n                        title=\"Sorting Algorithm\"\r\n                    >\r\n                        <Dropdown.Item eventKey=\"4-1\" disabled={isAnimating}>Insertion Sort</Dropdown.Item>\r\n                        <Dropdown.Item eventKey=\"4-2\" disabled={isAnimating}>Selection Sort</Dropdown.Item>\r\n                        <Dropdown.Item eventKey=\"4-3\" disabled={isAnimating}>Bubble Sort</Dropdown.Item>\r\n                        <Dropdown.Item eventKey=\"4-4\" disabled={isAnimating}>Quick Sort</Dropdown.Item>\r\n                        <Dropdown.Item eventKey=\"4-5\" disabled={isAnimating}>Merge Sort</Dropdown.Item>\r\n                    </Dropdown>\r\n                    <Nav.Item eventKey=\"5\" disabled={isAnimating}>\r\n                        Notes\r\n                    </Nav.Item>\r\n                    </Nav>\r\n                </Sidenav.Body>\r\n                </Sidenav>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default React.memo(Navigation);\r\n","import React from 'react'\r\nimport {\r\n    Slider,\r\n} from 'rsuite';\r\nimport '../styles/screen.css';\r\n\r\nconst Screen = ({arrayInfo, animationInfo, isAnimating, sorted}) => {\r\n\r\n    let arrayHeight = (100 - ((arrayInfo.currentArray.length - 1 ) * .28)) / arrayInfo.currentArray.length;\r\n    let displayArray = arrayInfo.currentArray.map(\r\n        (position, positionIndex) => {\r\n            return(\r\n                <div\r\n                className={position.className}\r\n                style={{\r\n                    width: `${position.number / 2 > 100 ? 100 : position.number / 2}%`,\r\n                    height: `${arrayHeight - .25}%`,\r\n                    margin: '0 0 0 auto',\r\n                    marginBottom: '.25%',\r\n                    borderTopLeftRadius: '5px',\r\n                    borderBottomLeftRadius: '5px',\r\n                }}\r\n                key={position.indexInArray}\r\n                >\r\n                    {arrayInfo.currentArray.length <= 30 &&\r\n                        <div\r\n                        style={{\r\n                            // border: '2px solid black',\r\n                            color: '#ffffff',\r\n                            fontWeight: 'bolder',\r\n                            textAlign: 'center',\r\n                            width: '50px',\r\n                            height: '100%',\r\n                            margin: '0 0 0 auto',\r\n                        }}\r\n                        >{position.number}</div>\r\n                    }\r\n                </div>\r\n            );\r\n        }\r\n    );\r\n\r\n    return (\r\n        <>\r\n            <div\r\n            style={{\r\n                width: '100%',\r\n                height: '100%',\r\n            }}\r\n            >\r\n                <div\r\n                style={{\r\n                    width: '100%',\r\n                    height: '10%',\r\n                    display: 'flex',\r\n                    flexDirection: 'row',\r\n                }}\r\n                >\r\n                    <div\r\n                    style={{\r\n                        width: '50%',\r\n                        height: '100%',\r\n                    }}\r\n                    >\r\n                        <h4 style={{textAlign: 'center', marginBottom: '5px', color: '#397afa'}}>Array Size</h4>\r\n                        <Slider\r\n                        style={{\r\n                            width: '90%',\r\n                            margin: 'auto',\r\n                        }}\r\n                        value={arrayInfo.currentArray.length}\r\n                        onChange={value => arrayInfo.setCurrentArray(arrayInfo.createNewArray(value))}\r\n                        min={5}\r\n                        max={120}\r\n                        tooltip={false}\r\n                        barClassName=\"sliderbar\"\r\n                        disabled={isAnimating || sorted}\r\n                        />\r\n                    </div>\r\n                    <div\r\n                    style={{\r\n                        width: '50%',\r\n                        height: '100%',\r\n                    }}\r\n                    >\r\n                        <h4 style={{textAlign: 'center', marginBottom: '5px', color: '#397afa'}}>Animation Speed</h4>\r\n                        <Slider\r\n                        style={{\r\n                            width: '90%',\r\n                            margin: 'auto',\r\n                        }}\r\n                        value={0 - animationInfo.animationMilliseconds}\r\n                        onChange={value => animationInfo.setAnimationMilliseconds(0 - value)}\r\n                        min={-400}\r\n                        max={-10}\r\n                        tooltip={false}\r\n                        barClassName=\"sliderbar\"\r\n                        disabled={isAnimating}\r\n                        />\r\n                    </div>\r\n                </div>\r\n                <div\r\n                style={{\r\n                    width: '98%',\r\n                    height: '90%',\r\n                    margin: '0 0 0 auto',\r\n                }}\r\n                >\r\n                    {displayArray}\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default React.memo(Screen);\r\n","/**App, general wrapper and top level state management component */\r\n\r\nimport React, {\r\n    useState,\r\n    useEffect,\r\n    useRef,\r\n} from 'react';\r\nimport {\r\n    Container,\r\n    Sidebar,\r\n    Header,\r\n    Content,\r\n    Alert,\r\n} from 'rsuite';\r\n\r\nimport {\r\n    headerStyles,\r\n    containerStyles,\r\n    innerContainer,\r\n    contentStyles,\r\n    sideBarStyles,\r\n} from '../styles/layout';\r\nimport Title from './Title';\r\nimport Navigation from './Navigation';\r\nimport Screen from './Screen';\r\nimport {\r\n    bubbleSort,\r\n    selectionSort,\r\n    insertionSort,\r\n    quickSort,\r\n    mergeSort,\r\n} from '../logic/Algorithms';\r\n\r\n\r\n//state independent callbacks:\r\n//callback to generate a new array:\r\nconst createNewArray = size => {\r\n    let newArray = [];\r\n    for(let counter = 0; counter < size; counter++){\r\n        newArray[counter] = {\r\n            number: Math.floor(Math.random() * 200) + 10,\r\n            indexInArray: counter,\r\n            className: 'initial',\r\n        }\r\n    }\r\n    return newArray;\r\n}\r\n//callback to randomize alg info:\r\nconst randomizeAlgInfo = () => {\r\n    //prepare random alg\r\n    let algNumber = Math.floor(Math.random() * (6 - 1) + 1);\r\n    let algName;\r\n    if(algNumber === 1) algName = 'Insertion Sort';\r\n    if(algNumber === 2) algName = 'Selection Sort';\r\n    if(algNumber === 3) algName = 'Bubble Sort';\r\n    if(algNumber === 4) algName = 'Merge Sort';\r\n    if(algNumber === 5) algName = 'Quick Sort';\r\n\r\n    //prepare random order\r\n    let orderNumber = Math.floor(Math.random() * (3 - 1) + 1);\r\n    let orderName;\r\n    if(orderNumber === 1) orderName = 'Ascending';\r\n    if(orderNumber === 2) orderName ='Descending';\r\n\r\n    return ({\r\n        algorithm: algName,\r\n        order: orderName,\r\n    });\r\n}\r\n\r\n\r\nconst App = () => {\r\n    //reference variables:\r\n    //ref variable to hold the interval window subscription\r\n    let animationInterval = useRef();\r\n    //ref variable to hold the position of the animating frame in the frames array\r\n    let animationPosition = useRef(0);\r\n    \r\n\r\n    //state variables\r\n    //state variable to track whether an animation is running\r\n    const [isAnimating, setIsAnimating] = useState(false);\r\n    //state variable that holds the current array being displayed\r\n    const [currentArray, setCurrentArray] = useState(() => createNewArray(Math.floor(Math.random() * (120 - 5) + 5)));\r\n    //state variable that tracks how many milliseconds animation should take\r\n    const [animationMilliseconds, setAnimationMilliseconds] = useState(100);\r\n    //state variable that holds the information that an alg needs to sort correctly\r\n    const [algsInfo, setAlgsInfo] = useState(randomizeAlgInfo);\r\n    //state variable to store the title message\r\n    const [titleMessage, setTitleMessage] = useState(`Visualizing ${algsInfo.algorithm} | ${algsInfo.order}`);\r\n    //state variable that stores the length of the frames array\r\n    const [frameLength, setFrameLength] = useState(0);\r\n    //state variable to tell the app when an array has already been sorted\r\n    const [sorted, setSorted] = useState(false);\r\n\r\n\r\n    //state dependent callbacks\r\n    //callback to sort current array:\r\n    const sort = () => {\r\n        let frames;\r\n        let descending = algsInfo.order === 'Ascending' ? false : true;\r\n        if(algsInfo.algorithm === 'Insertion Sort') frames = insertionSort(descending, JSON.parse(JSON.stringify(currentArray)));\r\n        if(algsInfo.algorithm === 'Selection Sort') frames = selectionSort(descending, JSON.parse(JSON.stringify(currentArray)));\r\n        if(algsInfo.algorithm === 'Bubble Sort') frames = bubbleSort(descending, JSON.parse(JSON.stringify(currentArray)));\r\n        if(algsInfo.algorithm === 'Quick Sort') frames = quickSort(descending, JSON.parse(JSON.stringify(currentArray)), 0, currentArray.length - 1);\r\n        if(algsInfo.algorithm === 'Merge Sort') frames = mergeSort(descending, JSON.parse(JSON.stringify(currentArray)), currentArray.length);\r\n        \r\n\r\n        let sortedArray = frames[frames.length - 1];\r\n        for(let counter = 0; counter < sortedArray.length; counter++){\r\n            sortedArray[counter].className = \"sorted\";\r\n        }\r\n        frames.push(JSON.parse(JSON.stringify(sortedArray)));\r\n\r\n        setFrameLength(frames.length);\r\n        animationInterval.current = setInterval(() => {\r\n            // console.log(\"animation position: \", position.current);\r\n            setCurrentArray(previousArray => {\r\n                //if(JSON.parse(JSON.stringify(previousArray)) === JSON.parse(JSON.stringify(allFrames.current[animationPosition.current]))) return previousArray;\r\n                return frames[animationPosition.current];\r\n            });\r\n            animationPosition.current += 1;\r\n        }, animationMilliseconds);\r\n    }\r\n    //callback to respond to user click on side nav\r\n    const respondToNavClick = eventKey => {\r\n\r\n        //for generating new array\r\n        if(eventKey === '2') {\r\n            window.location.reload();\r\n        }\r\n        //for making order ascending\r\n        if(eventKey === '3-1'){\r\n            setAlgsInfo(previousInfo => {return{...previousInfo, order: 'Ascending'}});\r\n            setTitleMessage(`Visualizing ${algsInfo.algorithm} | Ascending`);\r\n        }\r\n        //for making order descending\r\n        if(eventKey === '3-2'){\r\n            setAlgsInfo(previousInfo => {return{...previousInfo, order: 'Descending'}});\r\n            setTitleMessage(`Visualizing ${algsInfo.algorithm} | Descending`);\r\n        }\r\n        \r\n        //for making alg insertion\r\n        if(eventKey === '4-1'){\r\n            setAlgsInfo(previousInfo => {return{...previousInfo, algorithm: 'Insertion Sort'}});\r\n            setTitleMessage(`Visualizing Insertion Sort | ${algsInfo.order} `);\r\n        }\r\n        //for making alg selection\r\n        if(eventKey === '4-2'){\r\n            setAlgsInfo(previousInfo => {return{...previousInfo, algorithm: 'Selection Sort'}});\r\n            setTitleMessage(`Visualizing Selection Sort | ${algsInfo.order} `);\r\n        }\r\n        //for making alg bubble\r\n        if(eventKey === '4-3'){\r\n            setAlgsInfo(previousInfo => {return{...previousInfo, algorithm: 'Bubble Sort'}});\r\n            setTitleMessage(`Visualizing Bubble Sort | ${algsInfo.order} `);\r\n        }\r\n        //for making alg quick\r\n        if(eventKey === '4-4'){\r\n            setAlgsInfo(previousInfo => {return{...previousInfo, algorithm: 'Quick Sort'}});\r\n            setTitleMessage(`Visualizing Quick Sort | ${algsInfo.order} `);\r\n        }\r\n        //for making alg merge\r\n        if(eventKey === '4-5'){\r\n            setAlgsInfo(previousInfo => {return{...previousInfo, algorithm: 'Merge Sort'}});\r\n            setTitleMessage(`Visualizing Merge Sort | ${algsInfo.order} `);\r\n        }\r\n\r\n        //for sorting\r\n        if(eventKey === '1'){\r\n            if(sorted){\r\n                Alert.info(`Hmmm. Looks like this array is already sorted. Try refreshing to visualize again...`, 5000);\r\n                return;\r\n            }\r\n\r\n            Alert.info(`Alright let's do this!`, 2000);\r\n            setIsAnimating(true);\r\n            sort();\r\n        }\r\n    }\r\n\r\n    //side effects\r\n    //side effect that tracks when an animation is done\r\n    useEffect(() => {  \r\n        if(isAnimating && animationPosition.current === frameLength){\r\n            // console.log(\"current array:\", currentArray);\r\n            clearInterval(animationInterval.current);\r\n            setFrameLength(0);\r\n            setIsAnimating(false);\r\n            setSorted(true);\r\n            Alert.success(`That's ${algsInfo.algorithm} for you!`, 2000);\r\n        }\r\n    }, [animationPosition.current]);\r\n\r\n    return (\r\n        <>\r\n        <Container style={containerStyles}>\r\n        <Sidebar style={sideBarStyles}>\r\n            <Navigation\r\n            response={respondToNavClick}\r\n            isAnimating={isAnimating}\r\n            />\r\n        </Sidebar>\r\n        <Container style={innerContainer}>\r\n            <Header style={headerStyles}>\r\n                <Title\r\n                message={titleMessage}\r\n                />\r\n            </Header>\r\n            <Content style={contentStyles}>\r\n                <Screen\r\n                arrayInfo={{currentArray, setCurrentArray, createNewArray}}\r\n                animationInfo={{animationMilliseconds, setAnimationMilliseconds}}\r\n                isAnimating={isAnimating}\r\n                sorted={sorted}\r\n                />\r\n            </Content>\r\n        </Container >\r\n        </Container>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default React.memo(App);\r\n","export const bubbleSort = (decreasing, rawArray) => {\r\n    let swapped;\r\n    let holder;\r\n    let copyArray = rawArray;\r\n    let frames = []; // this will hold all frames from the sorting process\r\n    while(true){\r\n        swapped = false;\r\n        for(let counter = 0; counter < rawArray.length - 1; counter++){ \r\n            copyArray[counter].className = \"inComparison\";\r\n            copyArray[counter + 1].className = \"inComparison\";\r\n            frames.push(JSON.parse(JSON.stringify(copyArray)));\r\n            if(decreasing){\r\n                if(rawArray[counter].number < rawArray[counter + 1].number){\r\n                    copyArray[counter].className = \"wronglyOrdered\";\r\n                    copyArray[counter + 1].className = \"wronglyOrdered\";\r\n                    frames.push(JSON.parse(JSON.stringify(copyArray)));\r\n    \r\n                    holder = copyArray[counter].number;\r\n                    copyArray[counter].number = copyArray[counter + 1].number;\r\n                    copyArray[counter + 1].number = holder;\r\n                    swapped = true;\r\n                    frames.push(JSON.parse(JSON.stringify(copyArray)));\r\n                }\r\n\r\n            }else{\r\n                if(rawArray[counter].number > rawArray[counter + 1].number){\r\n                    copyArray[counter].className = \"wronglyOrdered\";\r\n                    copyArray[counter + 1].className = \"wronglyOrdered\";\r\n                    frames.push(JSON.parse(JSON.stringify(copyArray)));\r\n    \r\n                    holder = copyArray[counter].number;\r\n                    copyArray[counter].number = copyArray[counter + 1].number;\r\n                    copyArray[counter + 1].number = holder;\r\n                    swapped = true;\r\n                    frames.push(JSON.parse(JSON.stringify(copyArray)));\r\n                }\r\n            }\r\n\r\n            if(copyArray[counter].className !== \"initial\"){\r\n                copyArray[counter].className = \"initial\";\r\n                copyArray[counter + 1].className = \"initial\";\r\n                frames.push(JSON.parse(JSON.stringify(copyArray)));\r\n            }\r\n        }\r\n\r\n        if(!swapped) break;\r\n    }\r\n\r\n    return frames;\r\n}\r\n\r\nexport const selectionSort = (decreasing, rawArray) => {\r\n    let selectionLimit = rawArray.length - 1;\r\n    let holder;\r\n    let copyArray = rawArray;\r\n    let frames = [];\r\n    let criteria;\r\n    let indexOfCriteria = null;\r\n\r\n    while(selectionLimit > 0) {\r\n        criteria  = decreasing ? Infinity : -Infinity;\r\n        \r\n        //find the largest number;\r\n        for(let counter = 0; counter <= selectionLimit; counter++) {\r\n            copyArray[counter].className = \"inComparison\";\r\n            frames.push(JSON.parse(JSON.stringify(copyArray)));\r\n            if(decreasing){\r\n                if(copyArray[counter].number <= criteria) {\r\n                    //remove previous smallest\r\n                    if((indexOfCriteria || indexOfCriteria === 0) && indexOfCriteria !== selectionLimit + 1){\r\n                       copyArray[indexOfCriteria].className = \"initial\";\r\n                       frames.push(JSON.parse(JSON.stringify(copyArray)));\r\n                   }\r\n   \r\n                   indexOfCriteria = counter;\r\n                   criteria = copyArray[counter].number;\r\n                   //target this one as smallest\r\n                   copyArray[counter].className = \"wronglyOrdered\";\r\n                   frames.push(JSON.parse(JSON.stringify(copyArray)));  \r\n               }\r\n            }else{\r\n                \r\n                if(copyArray[counter].number >= criteria) {\r\n                    //remove previous largest\r\n                    if((indexOfCriteria || indexOfCriteria === 0) && indexOfCriteria !== selectionLimit + 1){\r\n                       copyArray[indexOfCriteria].className = \"initial\";\r\n                       frames.push(JSON.parse(JSON.stringify(copyArray)));\r\n                   }\r\n   \r\n                   indexOfCriteria = counter;\r\n                   criteria = copyArray[counter].number;\r\n                   //target this one as largest\r\n                   copyArray[counter].className = \"wronglyOrdered\";\r\n                   frames.push(JSON.parse(JSON.stringify(copyArray)));  \r\n               }\r\n            }\r\n\r\n            if(copyArray[counter].className !== \"wronglyOrdered\"){\r\n                copyArray[counter].className = \"initial\";\r\n                frames.push(JSON.parse(JSON.stringify(copyArray)));\r\n            }\r\n\r\n        }\r\n        \r\n        if(indexOfCriteria !== selectionLimit){\r\n            copyArray[selectionLimit].className = \"wronglyOrdered\";\r\n            frames.push(JSON.parse(JSON.stringify(copyArray)));\r\n        }\r\n\r\n        //swap the criteria to the index of current limit\r\n        holder = copyArray[selectionLimit].number;\r\n        copyArray[selectionLimit].number = copyArray[indexOfCriteria].number;\r\n        copyArray[indexOfCriteria].number = holder;\r\n        frames.push(JSON.parse(JSON.stringify(copyArray)));\r\n\r\n        copyArray[selectionLimit].className = \"sorted\";\r\n        frames.push(JSON.parse(JSON.stringify(copyArray)));\r\n        \r\n        selectionLimit--;\r\n    }\r\n\r\n    return frames;\r\n}\r\n\r\nexport const insertionSort = (decreasing, rawArray) => {\r\n    let holder;\r\n    let copyArray = rawArray;\r\n    let frames = [];\r\n    \r\n    for(let counter = 0; counter < copyArray.length; counter++) {\r\n        for(let compare = counter; compare > 0; compare--) {\r\n            copyArray[compare].className = \"inComparison\";\r\n            copyArray[compare - 1].className = \"inComparison\";\r\n            frames.push(JSON.parse(JSON.stringify(copyArray)));\r\n            \r\n            if(decreasing){\r\n                if(copyArray[compare].number > copyArray[compare - 1].number) {\r\n                    copyArray[compare].className = \"wronglyOrdered\";\r\n                    copyArray[compare - 1].className = \"wronglyOrdered\";\r\n                    frames.push(JSON.parse(JSON.stringify(copyArray)));\r\n    \r\n                    holder = copyArray[compare];\r\n                    copyArray[compare] = copyArray[compare - 1];\r\n                    copyArray[compare - 1] = holder;\r\n                    frames.push(JSON.parse(JSON.stringify(copyArray)));\r\n                }\r\n\r\n            }else{\r\n                if(copyArray[compare].number < copyArray[compare - 1].number) {\r\n                    copyArray[compare].className = \"wronglyOrdered\";\r\n                    copyArray[compare - 1].className = \"wronglyOrdered\";\r\n                    frames.push(JSON.parse(JSON.stringify(copyArray)));\r\n    \r\n                    holder = copyArray[compare];\r\n                    copyArray[compare] = copyArray[compare - 1];\r\n                    copyArray[compare - 1] = holder;\r\n                    frames.push(JSON.parse(JSON.stringify(copyArray)));\r\n                }\r\n            }\r\n\r\n            copyArray[compare].className = \"initial\";\r\n            copyArray[compare - 1].className = \"initial\";\r\n            frames.push(JSON.parse(JSON.stringify(copyArray)));\r\n        }\r\n    }\r\n    \r\n    return frames;\r\n    \r\n}\r\n\r\nexport const quickSort = (decreasing, rawArray, start, end) => {\r\n    const partition = (rawArray, start, end) => {\r\n        \r\n        let subframes = [];\r\n        let pivot = rawArray[end].number;\r\n    \r\n        rawArray[end].className = \"wronglyOrdered\";\r\n        subframes.push(JSON.parse(JSON.stringify(rawArray)));\r\n\r\n        let pivotIndex = start - 1; // this value will be used to determine the sorted position of the pivot\r\n        let holder;\r\n        \r\n        for(let counter = start; counter <= end - 1; counter++){\r\n            rawArray[counter].className = \"inComparison\";\r\n            subframes.push(JSON.parse(JSON.stringify(rawArray)));\r\n            //if the current element is smaller than or equal to the pivot, \r\n            if(decreasing){\r\n                if(rawArray[counter].number >= pivot){\r\n                    pivotIndex++;\r\n    \r\n                    //swap the position of the pivot index with that of the counter\r\n                    holder = rawArray[pivotIndex];\r\n                    rawArray[pivotIndex] = rawArray[counter];\r\n                    rawArray[counter] = holder;\r\n                    subframes.push(JSON.parse(JSON.stringify(rawArray)));\r\n    \r\n                    rawArray[pivotIndex].className = \"initial\";\r\n                    rawArray[counter].className = \"initial\";\r\n                    subframes.push(JSON.parse(JSON.stringify(rawArray)));\r\n    \r\n                }\r\n\r\n            }else{\r\n                if(rawArray[counter].number <= pivot){\r\n                    pivotIndex++;\r\n    \r\n                    //swap the position of the pivot index with that of the counter\r\n                    holder = rawArray[pivotIndex];\r\n                    rawArray[pivotIndex] = rawArray[counter];\r\n                    rawArray[counter] = holder;\r\n                    subframes.push(JSON.parse(JSON.stringify(rawArray)));\r\n    \r\n                    rawArray[pivotIndex].className = \"initial\";\r\n                    rawArray[counter].className = \"initial\";\r\n                    subframes.push(JSON.parse(JSON.stringify(rawArray)));\r\n    \r\n                }\r\n            }\r\n\r\n            rawArray[counter].className = \"initial\";\r\n            subframes.push(JSON.parse(JSON.stringify(rawArray)));\r\n\r\n        }\r\n\r\n        rawArray[pivotIndex + 1].className = \"wronglyOrdered\";\r\n        subframes.push(JSON.parse(JSON.stringify(rawArray)));\r\n        \r\n        //swap the end of the array with whatever is on the pivot index\r\n        holder = rawArray[pivotIndex + 1];\r\n        rawArray[pivotIndex + 1] = rawArray[end];\r\n        rawArray[end] = holder;\r\n        subframes.push(JSON.parse(JSON.stringify(rawArray)));\r\n\r\n\r\n        rawArray[end].className = \"initial\";\r\n        rawArray[pivotIndex + 1].className = \"sorted\";\r\n        subframes.push(JSON.parse(JSON.stringify(rawArray)));\r\n\r\n\r\n        return [pivotIndex + 1, subframes];\r\n    }\r\n    \r\n    let frames = [];\r\n    let stack = [];\r\n    let top = - 1;\r\n    stack[++top] = start;\r\n    stack[++top] = end;\r\n\r\n    while(top >= 0){\r\n        end = stack[top--];\r\n        start = stack[top--];\r\n\r\n        let [positionOfNextPivot, subframes] = partition(rawArray, start, end);\r\n        frames = frames.concat(subframes);\r\n\r\n        if(positionOfNextPivot - 1 > start){\r\n            stack[++top] = start;\r\n            stack[++top] = positionOfNextPivot - 1;\r\n        }\r\n\r\n        if(positionOfNextPivot + 1 < end){\r\n            stack[++top] = positionOfNextPivot + 1;\r\n            stack[++top] = end;\r\n        }\r\n    }\r\n    \r\n    return frames;\r\n}\r\n\r\nexport const mergeSort = (decreasing, arr,  n) =>\r\n    { \r\n          \r\n        const  merge = (arr, l, m, r) => \r\n            { \r\n                let i, j, k; \r\n                let n1 = m - l + 1; \r\n                let n2 = r - m; \r\n                let subframes = [];\r\n                \r\n                /* create temp arrays */\r\n                let L = []; \r\n                let R = []; \r\n                \r\n                /* Copy data to temp arrays L[] \r\n                and R[] */\r\n                for (i = 0; i < n1; i++) \r\n                    L[i] = arr[l + i]; \r\n\r\n                for (j = 0; j < n2; j++) \r\n                    R[j] = arr[m + 1+ j]; \r\n                \r\n                /* Merge the temp arrays back into \r\n                arr[l..r]*/\r\n                i = 0; \r\n                j = 0; \r\n                k = l; \r\n                let holder;\r\n                while (i < n1 && j < n2) \r\n                { \r\n\r\n                    //find index of L[i] and index of R[j] in raw\r\n                    let positionL;\r\n                    let positionR;\r\n                    let indexInRawL = L[i].indexInArray;\r\n                    let indexInRawR = R[j].indexInArray;\r\n\r\n                    //find L[i] position in the raw array;\r\n                    for(let counter = 0; counter < arr.length; counter++){\r\n                        if(indexInRawL === arr[counter].indexInArray) positionL = counter;\r\n                    }\r\n                    //find L[i] position in the raw array;\r\n                    for(let counter = 0; counter < arr.length; counter++){\r\n                        if(indexInRawR === arr[counter].indexInArray) positionR = counter;\r\n                    }\r\n\r\n                    arr[positionL].className = \"inComparison\";\r\n                    arr[positionR].className = \"inComparison\";\r\n                    subframes.push(JSON.parse(JSON.stringify(arr)));\r\n\r\n                    if(decreasing){\r\n\r\n                        if (L[i].number >= R[j].number) \r\n                        { \r\n                            arr[positionL].className = \"wronglyOrdered\";\r\n                            arr[k].className = \"wronglyOrdered\";\r\n                            subframes.push(JSON.parse(JSON.stringify(arr)));\r\n                            \r\n                            //perform a swap instead of an over right;\r\n                            holder = arr[k]\r\n                            arr[k] = arr[positionL];\r\n                            arr[positionL] = holder; \r\n                            i++; \r\n                            subframes.push(JSON.parse(JSON.stringify(arr)));\r\n\r\n                            arr[positionL].className = \"initial\";\r\n                            arr[k].className = \"initial\";\r\n                            subframes.push(JSON.parse(JSON.stringify(arr)));\r\n                        } \r\n                        else\r\n                        { \r\n                            arr[positionR].className = \"wronglyOrdered\";\r\n                            arr[k].className = \"wronglyOrdered\";\r\n                            subframes.push(JSON.parse(JSON.stringify(arr)));\r\n\r\n                            //perform a swap instead of an over right;\r\n                            holder = arr[k]\r\n                            arr[k] = arr[positionR];\r\n                            arr[positionR] = holder; \r\n                            j++; \r\n                            subframes.push(JSON.parse(JSON.stringify(arr)));\r\n\r\n                            arr[positionR].className = \"initial\";\r\n                            arr[k].className = \"initial\";\r\n                            subframes.push(JSON.parse(JSON.stringify(arr))); \r\n                        }\r\n\r\n                    }else{\r\n                        if (L[i].number <= R[j].number) \r\n                        { \r\n                            arr[positionL].className = \"wronglyOrdered\";\r\n                            arr[k].className = \"wronglyOrdered\";\r\n                            subframes.push(JSON.parse(JSON.stringify(arr)));\r\n                            \r\n                            //perform a swap instead of an over right;\r\n                            holder = arr[k]\r\n                            arr[k] = arr[positionL];\r\n                            arr[positionL] = holder; \r\n                            i++; \r\n                            subframes.push(JSON.parse(JSON.stringify(arr)));\r\n\r\n                            arr[positionL].className = \"initial\";\r\n                            arr[k].className = \"initial\";\r\n                            subframes.push(JSON.parse(JSON.stringify(arr)));\r\n                        } \r\n                        else\r\n                        { \r\n                            arr[positionR].className = \"wronglyOrdered\";\r\n                            arr[k].className = \"wronglyOrdered\";\r\n                            subframes.push(JSON.parse(JSON.stringify(arr)));\r\n\r\n                            //perform a swap instead of an over right;\r\n                            holder = arr[k]\r\n                            arr[k] = arr[positionR];\r\n                            arr[positionR] = holder; \r\n                            j++; \r\n                            subframes.push(JSON.parse(JSON.stringify(arr)));\r\n\r\n                            arr[positionR].className = \"initial\";\r\n                            arr[k].className = \"initial\";\r\n                            subframes.push(JSON.parse(JSON.stringify(arr))); \r\n                        } \r\n                    }\r\n\r\n\r\n                    k++;\r\n                    arr[positionL].className = \"initial\";\r\n                    arr[k].className = \"initial\";\r\n                    arr[positionR].className = \"initial\";\r\n                    subframes.push(JSON.parse(JSON.stringify(arr)));  \r\n                } \r\n\r\n                for(let counter = 0; counter < arr.length; counter++){\r\n                    if(arr[counter].className !== \"initial\") arr[counter].className = \"initial\";\r\n                }\r\n                \r\n                /* Copy the remaining elements of  \r\n                L[], if there are any */\r\n                while (i < n1) \r\n                { \r\n                    arr[k] = L[i]; \r\n                    i++; \r\n                    k++; \r\n                } \r\n                \r\n                /* Copy the remaining elements of \r\n                R[], if there are any */\r\n                while (j < n2) \r\n                { \r\n                    arr[k] = R[j];\r\n                    \r\n                    j++; \r\n                    k++; \r\n                } \r\n                subframes.push(JSON.parse(JSON.stringify(arr))); \r\n\r\n                return subframes;\r\n            }\r\n        let frames = []; \r\n        // For current size of subarrays to \r\n        // be merged curr_size varies from  \r\n        // 1 to n/2 \r\n        let curr_size;  \r\n                      \r\n        // For picking starting index of  \r\n        // left subarray to be merged \r\n        let left_start; \r\n                          \r\n          \r\n        // Merge subarrays in bottom up  \r\n        // manner. First merge subarrays  \r\n        // of size 1 to create sorted  \r\n        // subarrays of size 2, then merge \r\n        // subarrays of size 2 to create  \r\n        // sorted subarrays of size 4, and \r\n        // so on. \r\n        for (curr_size = 1; curr_size <= n-1;  \r\n                      curr_size = 2*curr_size) \r\n        { \r\n              \r\n            // Pick starting point of different \r\n            // subarrays of current size \r\n            for (left_start = 0; left_start < n-1; \r\n                        left_start += 2*curr_size) \r\n            { \r\n                // Find ending point of left  \r\n                // subarray. mid+1 is starting  \r\n                // point of right \r\n                let mid = Math.min(left_start + curr_size - 1, n-1); \r\n          \r\n                let right_end = Math.min(left_start  \r\n                             + 2*curr_size - 1, n-1); \r\n          \r\n                // Merge Subarrays arr[left_start...mid] \r\n                // & arr[mid+1...right_end] \r\n                let subframes = merge(arr, left_start, mid, right_end); \r\n                frames = frames.concat(subframes);\r\n            } \r\n        } \r\n\r\n        return frames;\r\n} \r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'rsuite/dist/styles/rsuite-default.css'\r\nimport App from './components/App';\r\n\r\nconst rootNode = document.querySelector(\"#root\");\r\nReactDOM.render(\r\n    <App/>, rootNode\r\n);"],"sourceRoot":""}